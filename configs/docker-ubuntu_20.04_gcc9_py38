
# OS type (linux OR osx)
OSTYPE = linux

# Specify the template to use
TEMPLATE = docker-ubuntu

# Specify the docker base image
DOCKER_BASE = ubuntu:20.04

# Specify additional packages to install for docker builds
DOCKER_SYS_PKGS = m4 libtool autoconf automake cmake libcfitsio-dev libhdf5-dev libboost-all-dev libopenmpi-dev python3 python3-dev python3-setuptools python3-pkg-resources python3-pip python3-tk python3-numpy python3-scipy python3-matplotlib python3-yaml python3-astropy python3-six python3-psutil python3-ephem python3-pandas python3-memory-profiler python3-ipython cython3 python3-cycler python3-kiwisolver python3-dateutil python3-toml python3-numba black python3-jupyter-client python3-h5py python3-mpi4py libsuitesparse-dev

# Packages to install with pip
PIP_PKGS = pshmem tomlkit traitlets

# Packages to install with conda
CONDA_PKGS =

# Serial compilers

CC = gcc
CXX = g++
FC = gfortran

# Compiler to use for packages needed on the build machine

BUILD_CC = gcc
BUILD_CXX = g++

# MPI compilers

MPICC = mpicc
MPICXX = mpicxx
MPIFC = mpifort
MPI_CPPFLAGS = /usr/include
MPI_LDFLAGS = /usr/lib/x86_64-linux-gnu
MPI_CXXLIB = mpi_cxx
MPI_LIB = mpi
MPI_EXTRA_COMP =
MPI_EXTRA_LINK =

# Compile flags

CFLAGS = -O2 -g -fPIC -pthread
CXXFLAGS = -O2 -g -fPIC -pthread -std=c++11
FCFLAGS = -O2 -g -fPIC -pthread

OPENMP_CFLAGS = -fopenmp
OPENMP_CXXFLAGS = -fopenmp
LDFLAGS = -lpthread -fopenmp

# Are we doing a cross-compile?
CROSS =

# Python version
PYVERSION = 3.8

# Parallel builds
MAKEJ = 2

# Define MKL location
MKL =

# For BLAS/LAPACK, we use openblas

BLAS = -lopenblas -fopenmp -lm
LAPACK =

# Boost toolchain name

BOOSTCHAIN = gcc

# Group and permissions to set

CHGRP =
CHMOD =
