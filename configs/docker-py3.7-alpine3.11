
# OS type (linux OR macos)
OSTYPE = linux

# Specify the template to use
TEMPLATE = docker-alpine

# Python version
PYVERSION = 3.7

# Specify the docker base image
DOCKER_BASE = python:3.7-alpine3.11

# Specify additional packages to install for docker builds
DOCKER_SYS_PKGS = python3 python3-dev cython py3-nose py3-yaml py3-numpy py3-numpy-dev py3-scipy cmake m4 libtool autoconf automake zlib llvm8-dev

# Packages to install with pip
PIP_PKGS = setuptools future six cycler kiwisolver pyparsing python-dateutil toml pkgconfig matplotlib astropy psutil ephem pandas memory_profiler ipython numba pyfftw

# Packages to install with conda
CONDA_PKGS =

# Serial compilers

CC = gcc
CXX = g++
FC = gfortran

# Compiler to use for packages needed on the build machine

BUILD_CC = gcc
BUILD_CXX = g++

# MPI compilers

MPICC = mpicc
MPICXX = mpicxx
MPIFC = mpifort
MPI_CPPFLAGS = @AUX_PREFIX@/include
MPI_LDFLAGS = @AUX_PREFIX@/lib
MPI_CXXLIB = mpichcxx
MPI_LIB = mpich
MPI_EXTRA_COMP =
MPI_EXTRA_LINK =

# Compile flags

CFLAGS = -O2 -g -fPIC -pthread
CXXFLAGS = -O2 -g -fPIC -pthread -std=c++11
FCFLAGS = -O2 -g -fPIC -pthread

OPENMP_CFLAGS = -fopenmp
OPENMP_CXXFLAGS = -fopenmp
LDFLAGS = -lpthread -fopenmp

# Are we doing a cross-compile?
CROSS =

# Parallel builds
MAKEJ = 1

# Define MKL location
MKL =

# For BLAS/LAPACK, we use openblas

BLAS = -lopenblas -fopenmp -lm
LAPACK =

# Boost toolchain name

BOOSTCHAIN = gcc

# Group and permissions to set

CHGRP =
CHMOD =
